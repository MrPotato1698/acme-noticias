---
import Layout from "@/layouts/Layout.astro";

import { supabase } from "@/db/supabase";

const { cookies, redirect } = Astro;

const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
  redirect("/login");
}

// Set the session with the cookies
const { data: dataAuth, error: errorAuth } = await supabase.auth.setSession({
  refresh_token: refreshToken?.value ?? "",
  access_token: accessToken?.value ?? "",
});

// If there is an error, delete the cookies and redirect to login
if (errorAuth) {
  cookies.delete("sb-access-token", {
    path: "/",
  });
  cookies.delete("sb-refresh-token", {
    path: "/",
  });
}

const id = dataAuth?.user?.id || "";

const { data: userData } = await supabase
  .from("profiles")
  .select("rol!inner(name)")
  .eq("id", id)
  .single();

const { data: articlesData, error: errorArticlesData } = await supabase
  .from("article")
  .select("id, title, body, timestamp, author!inner(id, full_name) ")
  .order("timestamp", { ascending: false });

if (errorArticlesData || !articlesData) {
  console.error("Error fetching articles:", errorArticlesData);
}

let articlesDataAuthor;
if(articlesData && userData?.rol.name === "Redactor"){
  articlesDataAuthor = articlesData.filter((article) => article.author.id === id);
} else {
  articlesDataAuthor = articlesData;
}

const { data: categoriesArticlesData, error: errorCategoriesArticlesData } =
  await supabase
    .from("articlecategories")
    .select("article, category!inner(name)");

if (errorCategoriesArticlesData || !categoriesArticlesData) {
  console.error("Error fetching categories:", errorCategoriesArticlesData);
}
---

<Layout>

  <div class="max-w-7xl mx-auto p-8">
    <h1 class="text-4xl font-bold mb-4">Administar Articulos</h1>

    <div class="flex justify-end mb-4">
      <a href='/newarticle' class="bg-blue-600 text-white py-2 px-4 rounded">Añadir nuevos articulos</a>
    </div>

    <div class="overflow-x-auto bg-white rounded-lg shadow-md">
      <table class="w-full border-collapse">
        <thead>
          <tr>
            <th class="bg-gray-100 font-semibold py-3 px-4 text-left">Titulo</th>
            <th class="bg-gray-100 font-semibold py-3 px-4 text-left">Cuerpo</th>
            <th class="bg-gray-100 font-semibold py-3 px-4 text-left">Categorias</th>
            <th class="bg-gray-100 font-semibold py-3 px-4 text-left">Publicado</th>
            <th class="bg-gray-100 font-semibold py-3 px-4 text-left">Autor</th>
            <th class="bg-gray-100 font-semibold py-3 px-4 text-left">Acciones</th>
          </tr>
        </thead>

        <tbody>
          {
            articlesDataAuthor?.map((article) => (
              <tr class="hover:bg-gray-50 table-row">
                <td class="font-medium max-w-xs py-3 px-4">{article.title}</td>
                <td class="text-sm py-3 px-4">
                    <div class="line-clamp-3 overflow-hidden text-ellipsis max-w-2xl">
                  {article.body}
                  </div>
                </td>
                <td class="gap-2 py-3 px-4">
                  <div class="flex flex-wrap gap-2">
                  {
                    categoriesArticlesData
                    ?.filter((obj) => obj.article === article.id)
                    .map((obj) => (
                      <span class="bg-blue-100 text-blue-700 rounded-full px-2 py-0.5 text-xs font-medium">
                      {obj.category?.name}
                      </span>
                    ))
                  }
                  </div>
                </td>
                <td class="py-3 px-4">{new Date(article.timestamp).toLocaleDateString('es-ES', { day: 'numeric', month: 'long', year: 'numeric'})}</td>
                <td class="py-3 px-4">{article.author.full_name ?? "Anom"}</td>
                <td class="px-4 my-5 grid grid-rows-2 gap-2 ">
                  <a href={`http://localhost:4321/admin/article/${article.id}`}
                    class="bg-primary text-light px-4 py-2 rounded hover:bg-primary/90 text-sm cursor-pointer">
                    Modificar
                  </a>
                  <button
                    class="bg-red-700 text-light px-4 py-2 rounded hover:bg-red-800 text-sm cursor-pointer"
                    data-id={article.id}>
                    Borrar
                  </button>
                </td>
              </tr>
            ))
          }
        </tbody>
      </table>
    </div>
  </div>
</Layout>

<script>
  // Client-side functionality
  document.addEventListener("DOMContentLoaded", () => {
    // Edit button functionality
    document.querySelectorAll(".btn-edit").forEach((button) => {
      button.addEventListener("click", () => {
        const articleId = button.getAttribute("data-id");
        window.location.href = `/admin/edit-article?id=${articleId}`;
      });
    });

    // Delete button functionality
    document.querySelectorAll(".btn-delete").forEach((button) => {
      button.addEventListener("click", async (e) => {
        e.preventDefault();
        const articleId = button.getAttribute("data-id");
        if (!articleId) return;
        if (!confirm("¿Estás seguro de que quieres eliminar este elemento?")) return;
        try {
          const response = await fetch(`/api/article/deletearticle`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ id: articleId }),
          });
          if (response.ok) {
            alert("Elemento eliminado correctamente");
            window.location.reload();
          } else {
            alert("Error eliminando el elemento: " + response.statusText);
            console.error("Error eliminando el elemento:", response.statusText);
          }
        } catch (error) {
          alert("Error eliminando el elemento: " + error);
        }
      });
    });
  });
</script>

<style>
  .table-row:nth-child(even) {
    background-color: #f9f9f9;
  }
  .table-row:nth-child(odd) {
    background-color: #fff;
  }
</style>