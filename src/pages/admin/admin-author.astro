---
import Layout from '@/layouts/Layout.astro';
import { supabase } from '@/db/supabase';

const { cookies, redirect } = Astro;

const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
  return redirect("/login");
}

// Set the session with the cookies
const { data: dataAuth, error: errorAuth } = await supabase.auth.setSession({
  refresh_token: refreshToken.value,
  access_token: accessToken.value,
});

// If there is an error, delete the cookies and redirect to login
if (errorAuth) {
  cookies.delete("sb-access-token", {
    path: "/",
  });
  cookies.delete("sb-refresh-token", {
    path: "/",
  });

  return redirect("/login");
}

const id = dataAuth?.user?.id || "";

const { data: userData } = await supabase
  .from("profiles")
  .select("rol")
  .eq("id", id)
  .single();

if (userData == null || userData.rol == null || userData.rol > 1) {
  return redirect("/");
}

const { data: authorData, error: errorAuhtorData } = await supabase
  .from('profiles')
  .select('id, full_name, email')
  .eq('rol', 2);

---

<Layout title = "IBÑ News - Administrar Redactores">
  <div class="max-w-7xl mx-auto p-8">
    <h1 class="text-4xl font-bold mb-4">Administrar Redactores</h1>

    <div class="overflow-x-auto bg-white rounded-lg shadow-md">
      <table class="w-full border-collapse">
        <thead>
          <tr>
            <th class="bg-gray-100 font-semibold py-3 px-4 text-left">Nombre</th>
            <th class="bg-gray-100 font-semibold py-3 px-4 text-left">Correo</th>
            <th class="bg-gray-100 font-semibold py-3 px-4 text-left">Acciones</th>
          </tr>
        </thead>

        <tbody>
          {authorData && authorData.map((author) => (
            <tr class="hover:bg-gray-50 table-row">
              <td class="py-3 px-4">{author.full_name}</td>
              <td class="py-3 px-4">{author.email}</td>
              <td class="py-3 px-4 space-x-2">
                <a href={`http://localhost:4321/admin/authors/${author.id}`}
                  class="bg-primary text-light px-4 py-2 rounded border-b-2 border-primary hover:bg-primary/90 hover:border-primary/90 text-sm cursor-pointer">
                  Modificar
                </a>
                <button
                  class="bg-red-700 text-light px-4 py-2 rounded hover:bg-red-800 text-sm cursor-pointer"
                  data-id={author.id}>
                  Borrar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  </div>

</Layout>

<script>
  // Delete button functionality
  document.querySelectorAll(".btn-delete").forEach((button) => {
    button.addEventListener("click", async (e) => {
      e.preventDefault();
      const authorId = button.getAttribute("data-id");
      if (!authorId) return;
      if (!confirm("¿Estás seguro de que quieres eliminar este elemento?")) return;
      try {
        const response = await fetch(`/api/author/deleteauthor`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ id: authorId }),
        });
        if (response.ok) {
          alert("Elemento eliminado correctamente");
          window.location.reload();
        } else {
          alert("Error eliminando el elemento: " + response.statusText);
          console.error("Error eliminando el elemento:", response.statusText);
        }
      } catch (error) {
        alert("Error eliminando el elemento: " + error);
      }
    });
  });
</script>

<style>
  .table-row:nth-child(even) {
    background-color: #f9f9f9;
  }
  .table-row:nth-child(odd) {
    background-color: #fff;
  }
</style>
