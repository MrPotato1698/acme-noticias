---
import { supabase } from '@/db/supabase';

// Obtener estadísticas generales
const { data: articlesCount } = await supabase
  .from('article')
  .select('id', { count: 'exact' });

const { data: commentsCount } = await supabase
  .from('commentary')
  .select('id', { count: 'exact' });

const { data: activeWriters } = await supabase
  .from('article')
  .select('author', { count: 'exact' })
  .not('author', 'is', null);

// Si no tienes esa función RPC, usar esta consulta alternativa:
const { data: allArticlesWithComments } = await supabase
  .from('article')
  .select(`
    id,
    title,
    commentary!left(id)
  `);

// Procesar los datos para obtener el conteo
const topArticles = allArticlesWithComments
  ?.map(article => ({
    ...article,
    commentCount: article.commentary?.length || 0
  }))
  .sort((a, b) => b.commentCount - a.commentCount)
  .slice(0, 5) || [];

// Media de comentarios por artículo
const totalArticles = articlesCount?.length || 0;
const totalComments = commentsCount?.length || 0;
const avgCommentsPerArticle = totalArticles > 0 ? (totalComments / totalArticles).toFixed(2) : 0;

// Redactor con más artículos
const { data: writerStats } = await supabase
  .from('article')
  .select(`
    author,
    profiles!inner(full_name)
  `);

// Procesar estadísticas de redactores
const writerArticleCount: Record<string, number> = {};
const writerNames: Record<string, string> = {};

if (writerStats) {
  writerStats.forEach(article => {
    const authorId = article.author;
    const authorName = article.profiles.full_name;

    writerArticleCount[authorId] = (writerArticleCount[authorId] || 0) + 1;
    writerNames[authorId] = authorName ?? '';
  });
}

const topWriter = Object.entries(writerArticleCount)
  .sort(([,a], [,b]) => b - a)[0];

// Redactor con más comentarios hechos
const { data: commentStats } = await supabase
  .from('commentary')
  .select('redactor')
  .not('redactor', 'is', null);

// Obtener perfiles de los redactores que han hecho comentarios
const redactorIds = commentStats ? Array.from(new Set(commentStats.map(c => c.redactor))).filter((id): id is string => typeof id === 'string') : [];
let redactorProfiles: { id: string; full_name: string }[] = [];
if (redactorIds.length > 0) {
  const { data: profilesData } = await supabase
    .from('profiles')
    .select('id, full_name')
    .in('id', redactorIds);
  redactorProfiles = (profilesData || []).map(profile => ({
    id: profile.id,
    full_name: profile.full_name ?? ''
  }));
}
const redactorIdToName: Record<string, string> = {};
redactorProfiles.forEach(profile => {
  redactorIdToName[profile.id] = profile.full_name;
});

const writerCommentCount: Record<string, number> = {};
if (commentStats) {
  commentStats.forEach(comment => {
    const authorId = comment.redactor;
    let authorName = '';
    if (authorId !== null && authorId !== undefined) {
      authorName = redactorIdToName[authorId] ?? '';
      writerCommentCount[authorId] = (writerCommentCount[authorId] || 0) + 1;
      writerNames[authorId] = authorName;
    }
  });
}

const topCommenter = Object.entries(writerCommentCount)
  .sort(([,a], [,b]) => b - a)[0];

// Redactor con más comentarios en sus propios artículos
const { data: selfComments } = await supabase
  .from('commentary')
  .select(`
    redactor,
    article!inner(author)
  `)
  .not('redactor', 'is', null);

// Obtener los IDs de los redactores que comentaron en sus propios artículos
const selfCommentRedactorIds = selfComments
  ? Array.from(
      new Set(
        selfComments
          .filter(comment => comment.redactor === comment.article.author)
          .map(comment => comment.redactor)
      )
    ).filter((id): id is string => typeof id === 'string')
  : [];

// Obtener los nombres de los redactores
let selfCommentRedactorProfiles: { id: string; full_name: string }[] = [];
if (selfCommentRedactorIds.length > 0) {
  const { data: profilesData } = await supabase
    .from('profiles')
    .select('id, full_name')
    .in('id', selfCommentRedactorIds);
  selfCommentRedactorProfiles = (profilesData || []).map(profile => ({
    id: profile.id,
    full_name: profile.full_name ?? ''
  }));
}
const selfCommentRedactorIdToName: Record<string, string> = {};
selfCommentRedactorProfiles.forEach(profile => {
  selfCommentRedactorIdToName[profile.id] = profile.full_name;
});

const selfCommentCount: Record<string, number> = {};
if (selfComments) {
  selfComments.forEach(comment => {
    if (comment.redactor === comment.article.author) {
      const authorId = comment.redactor;
      const authorName = selfCommentRedactorIdToName[authorId] ?? '';

      selfCommentCount[authorId] = (selfCommentCount[authorId] || 0) + 1;
      writerNames[authorId] = authorName;
    }
  });
}

const topSelfCommenter = Object.entries(selfCommentCount)
  .sort(([,a], [,b]) => b - a)[0];

// Número de redactores únicos
const uniqueWriters = Object.keys(writerArticleCount).length;

// Artículos por mes (últimos 6 meses)
const sixMonthsAgo = new Date();
sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);

const { data: recentArticles } = await supabase
  .from('article')
  .select('timestamp')
  .gte('timestamp', sixMonthsAgo.toISOString());

const monthlyStats: Record<string, number> = {};
if (recentArticles) {
  recentArticles.forEach(article => {
    const month = new Date(article.timestamp).toLocaleDateString('es-ES', {
      year: 'numeric',
      month: 'long'
    });
    monthlyStats[month] = (monthlyStats[month] || 0) + 1;
  });
}
---

<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
  <!-- Estadísticas principales -->
  <div class="bg-white rounded-lg shadow p-6">
    <div class="flex items-center">
      <div class="flex-shrink-0">
        <div class="w-8 h-8 bg-primary rounded-md flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M2 5a2 2 0 012-2h8a2 2 0 012 2v10a2 2 0 002 2H4a2 2 0 01-2-2V5zm3 1h6v4H5V6zm6 6H5v2h6v-2z" clip-rule="evenodd"></path>
            <path d="M15 7h1a2 2 0 012 2v5.5a1.5 1.5 0 01-3 0V9a1 1 0 00-1-1h-1v-1z"></path>
          </svg>
        </div>
      </div>
      <div class="ml-4">
        <p class="text-sm font-medium text-gray-500">Total Artículos</p>
        <p class="text-2xl font-semibold text-dark">{totalArticles}</p>
      </div>
    </div>
  </div>

  <div class="bg-white rounded-lg shadow p-6">
    <div class="flex items-center">
      <div class="flex-shrink-0">
        <div class="w-8 h-8 bg-secondary rounded-md flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd"></path>
          </svg>
        </div>
      </div>
      <div class="ml-4">
        <p class="text-sm font-medium text-gray-500">Total Comentarios</p>
        <p class="text-2xl font-semibold text-dark">{totalComments}</p>
      </div>
    </div>
  </div>

  <div class="bg-white rounded-lg shadow p-6">
    <div class="flex items-center">
      <div class="flex-shrink-0">
        <div class="w-8 h-8 bg-accent rounded-md flex items-center justify-center">
          <svg class="w-5 h-5 text-dark" fill="currentColor" viewBox="0 0 20 20">
            <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"></path>
          </svg>
        </div>
      </div>
      <div class="ml-4">
        <p class="text-sm font-medium text-gray-500">Redactores Activos</p>
        <p class="text-2xl font-semibold text-dark">{uniqueWriters}</p>
      </div>
    </div>
  </div>

  <div class="bg-white rounded-lg shadow p-6">
    <div class="flex items-center">
      <div class="flex-shrink-0">
        <div class="w-8 h-8 bg-green-500 rounded-md flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path d="M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z"></path>
          </svg>
        </div>
      </div>
      <div class="ml-4">
        <p class="text-sm font-medium text-gray-500">Media Comentarios/Artículo</p>
        <p class="text-2xl font-semibold text-dark">{avgCommentsPerArticle}</p>
      </div>
    </div>
  </div>
</div>

<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
  <!-- Top 5 artículos con más comentarios -->
  <div class="bg-white rounded-lg shadow p-6">
    <h3 class="text-lg font-semibold text-dark mb-4">Top 5 Artículos con Más Comentarios</h3>
    <div class="space-y-3">
  {topArticles && topArticles.map((article, index) => (
    <div class="bg-gray-50 rounded-lg p-4">
      <div class="flex items-start gap-3">
        <span class="w-6 h-6 bg-primary text-white rounded-full flex items-center justify-center text-xs font-bold flex-shrink-0 mt-1">
          {index + 1}
        </span>
        <div class="flex-1 min-w-0">
          <h4 class="text-sm font-medium text-dark leading-tight mb-2 line-clamp-2">
            {article.title}
          </h4>
          <div class="flex items-center justify-between">
            <span class="text-xs text-gray-500 font-medium">
              {article.commentCount} {article.commentCount === 1 ? 'comentario' : 'comentarios'}
            </span>
            <a
              href={`/article/${article.id}`}
              class="px-3 py-1 bg-primary text-white text-xs rounded hover:bg-blue-700 transition-colors flex-shrink-0"
            >
              Ver artículo
            </a>
          </div>
        </div>
      </div>
    </div>
  ))}
</div>
    {(!topArticles || topArticles.length === 0) && (
      <p class="text-gray-500 text-center py-4">No hay artículos disponibles.</p>
    )}
  </div>

  <!-- Estadísticas de redactores -->
  <div class="bg-white rounded-lg shadow p-6">
    <h3 class="text-lg font-semibold text-dark mb-4">Estadísticas de Redactores</h3>
    <div class="space-y-4">
      {topWriter && (
        <div class="p-3 bg-blue-50 rounded">
          <p class="text-sm font-medium text-gray-700">Más Artículos Escritos</p>
          <p class="text-lg font-semibold text-dark">
            {writerNames[topWriter[0]]} ({topWriter[1]} artículos)
          </p>
        </div>
      )}

      {topCommenter && (
        <div class="p-3 bg-green-50 rounded">
          <p class="text-sm font-medium text-gray-700">Más Comentarios Realizados</p>
          <p class="text-lg font-semibold text-dark">
            {writerNames[topCommenter[0]]} ({topCommenter[1]} comentarios)
          </p>
        </div>
      )}

      {topSelfCommenter && (
        <div class="p-3 bg-yellow-50 rounded">
          <p class="text-sm font-medium text-gray-700">Más Comentarios en Sus Artículos</p>
          <p class="text-lg font-semibold text-dark">
            {writerNames[topSelfCommenter[0]]} ({topSelfCommenter[1]} comentarios)
          </p>
        </div>
      )}
    </div>
  </div>

  <!-- Actividad mensual -->
  <div class="bg-white rounded-lg shadow p-6 lg:col-span-2">
    <h3 class="text-lg font-semibold text-dark mb-4">Artículos Publicados (Últimos 6 Meses)</h3>
    <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
      {Object.entries(monthlyStats).map(([month, count]) => (
        <div class="text-center p-3 bg-gray-50 rounded">
          <p class="text-xs text-gray-500 mb-1">{month}</p>
          <p class="text-xl font-bold text-dark">{count}</p>
        </div>
      ))}
    </div>
  </div>
</div>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
