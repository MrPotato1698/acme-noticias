---
import { supabase } from '@/db/supabase';

// Obtener todas las categorías
const { data: categories, error } = await supabase
  .from('category')
  .select('*')
  .order('name');

if (error) {
  console.error('Error fetching categories:', error);
}
---

<div class="bg-white rounded-lg shadow">
  <div class="p-6">
    <!-- Formulario para añadir categoría -->
    <div class="mb-8">
      <h3 class="text-lg font-semibold text-dark mb-4">Añadir Nueva Categoría</h3>
      <form id="add-category-form" class="flex flex-col sm:flex-row gap-4">
        <div class="flex-1">
          <input
            type="text"
            id="category-name"
            name="name"
            placeholder="Nombre de la categoría"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
            required
          />
        </div>
        <div class="flex-1">
          <input
            type="text"
            id="category-description"
            name="description"
            placeholder="Descripción (opcional)"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
          />
        </div>
        <button
          type="submit"
          class="px-6 py-2 bg-primary text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 whitespace-nowrap"
        >
          Añadir Categoría
        </button>
      </form>
    </div>

    <!-- Lista de categorías existentes -->
    <div>
      <h3 class="text-lg font-semibold text-dark mb-4">Categorías Existentes</h3>
      <div id="categories-list" class="space-y-3">
        {categories && categories.map((category) => (
          <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg" data-category-id={category.id}>
            <div class="flex-1">
              <h4 class="font-medium text-dark">{category.name}</h4>
              {category.description && (
                <p class="text-sm text-gray-600 mt-1">{category.description}</p>
              )}
            </div>
            <button
              class="delete-category-btn px-4 py-2 bg-secondary text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2"
              data-category-id={category.id}
              data-category-name={category.name}
            >
              Eliminar
            </button>
          </div>
        ))}
      </div>

      {(!categories || categories.length === 0) && (
        <p class="text-gray-500 text-center py-8">No hay categorías creadas aún.</p>
      )}
    </div>
  </div>

  <div id="status-messages" class="fixed top-4 right-4 z-50"></div>
</div>

<script>
  // Elementos del DOM
  const addForm = document.getElementById('add-category-form');
  const categoriesList = document.getElementById('categories-list');

  const statusMessages = document.getElementById('status-messages');


  // Función para mostrar mensajes
  function showMessage(message: string, type = 'success') {
    const messageDiv = document.createElement('div');
    messageDiv.className = `p-4 rounded-md mb-2 ${
      type === 'success'
        ? 'bg-green-100 border border-green-400 text-green-700'
        : 'bg-red-100 border border-red-400 text-red-700'
    }`;
    messageDiv.textContent = message;

    if (statusMessages) {
      statusMessages.appendChild(messageDiv);
    }

    setTimeout(() => {messageDiv.remove();}, 5000);
  }

  // Añadir categoría
  if (addForm) {
    addForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      const form = this as HTMLFormElement;
      const formData = new FormData(form);
      const name = (formData.get('name') as string).trim();
      const description = (formData.get('description') as string).trim();

      if (!name) return;

      try {
        const response = await fetch('/api/categories/newcategory', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ name, description })
        });

        if (response.ok) {
          showMessage('Categoría añadida exitosamente');
          (this as HTMLFormElement).reset();
          setTimeout(() => window.location.reload(), 1500);
        } else {
          const error = await response.json();
          showMessage(error.error || 'Error al añadir la categoría', 'error');
        }
      } catch (error) {
        showMessage('Error de conexión', 'error');
      }
    });
  }

  // Eliminar categoría con alert nativo
  categoriesList?.addEventListener('click', async function(e) {
      if ((e.target as HTMLElement).classList.contains('delete-category-btn')) {
        const categoryId = (e.target as HTMLElement).dataset.categoryId;
        const categoryName = (e.target as HTMLElement).dataset.categoryName;

      const confirmed = confirm(`¿Estás seguro de que quieres eliminar la categoría "${categoryName}"?\n\nEsta acción no se puede deshacer.`);
      if (!confirmed) return;
      try {
        const response = await fetch(`/api/categories/${categoryId}`, {
          method: 'DELETE'
        });

        if (response.ok) {
            showMessage('Categoría eliminada exitosamente');
          // Remover el elemento del DOM
          const categoryElement = document.querySelector(`[data-category-id="${categoryId}"]`);
          if (categoryElement) {
            categoryElement.remove();
          }

        } else {
          const error = await response.json();
          showMessage(error.error || 'Error al eliminar la categoría', 'error');
        }
      } catch (error) {
        showMessage('Error de conexión', 'error');
      }
    }});
</script>
